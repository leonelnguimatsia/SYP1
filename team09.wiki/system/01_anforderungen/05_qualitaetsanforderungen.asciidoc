[[sec:qualitaetsanforderungen]]
= Quality Attributes

//NOTE: Beschreiben und klassifizieren Sie hier die Qualitätsanforderungen Ihres Systems. Unten finden Sie Beispiele für jeweils eine Kategorie. 


==== /LQ01 / User experience
[cols="1,3"]
|===
|Category 
|Functionality 

|Explanation
|The use of the website should be seamless. 

|===

==== /LQ02 / Deployment of changes
[cols="1,3"]
|===
|Category 
|Maintainability 

|Explanation
|Deployment of security updates should  not affect the service of secure web application. 

|===

==== /LQ03 / Availability of source code
[cols="1,3"]
|===
|Category 
|Availability 

|Explanation
|The source code should be always available on Github. 

|===

==== /LQ04 / Exception handling
[cols="1,3"]
|===
|Category 
|Resilience 

|Explanation
|The system should be reliable against exceptions and unforeseen events. 

|===

==== /LQ05 / Efficiency
[cols="1,3"]
|===
|Category 
|Efficiency

|Explanation
|Security features should not significantly slow down the application.
|===


==== /LQ06 / User authentication / Two-factor Authentification
[cols="1,3"]
|===
|Category 
|Security

|Explanation
|The identity of the user and admin  is to be authenticated using two-factor-authentication. 

|===
==== /LQ07 / TLS-Connection
[cols="1,3"]
|===
|Category 
| Security

|Explanation
|Data transmittion between server and client is to be encrypted and not viewable by third parties  

|===

==== /LQ08 / Password hashing
[cols="1,3"]
|===
|Category 
|Security

|Explanation 
|Plaintexts are to be turned into and stored as salted hash values.

|===
==== /LQ09 / Protection against injection attacks
[cols="1,3"]
|===
|Category 
|Security

|Explanation
|All  parameters that are passed to an SQL statement should  be escaped.

|===

==== /LQ10 / Protection against cross-site scripting (XSS)
[cols="1,3"]
|===
|Category 
|Security

|Explanation
|User inputs in text boxes are to be escaped.

|===

==== /LQ11 / Content Security Policy (CSP)
[cols="1,3"]
|===
|Category 
|Security

|Explanation
|A properly configured CSP header should be included in each HTTP response.

|===


==== /LQ12 / Protection against cross-site request forgery (CSRF)
[cols="1,3"]
|===
|Category 
|Security

|Explanation
|Anti-CSRF tokens to be applied.

|===

==== /LQ13 / Protection against broken authentication
[cols="1,3"]
|===
|Category 
|Security

|Explanation
|Users shall only access resources if they are properly authenticated and have sufficient permissions.

|===

==== /LQ14 / WebAuthn
[cols="1,3"]
|===
|Category 
|Security

|Explanation
|WebAuthn based authentication instead of plain password should be considered if necessary.

|===

==== /LQ15 / Secure components and configuration
[cols="1,3"]
|===
|Category
|Configuration / Security

|Explanation
|All components should be meeting current security standards and should be configured properly. 

|===

==== /LQ16 / Code maintainability
[cols="1,3"]
|===
|Category
|Development /  Maintainability

|Explanation
|Application should be built such that security components can be easily extended or removed depending on the use case. 

|===

==== /LQ17 / Logging
[cols="1,3"]
|===
|Category
|Traceability

|Explanation
|User interactions with the web application is to be logged. 

|===

==== /LQ18 / Minimal password complexity
[cols="1,3"]
|===
|Category
|Security

|Explanation
|Passwords should contain a minimum of 8 characters, using a mix of uppercase and lowercase letters, numbers, and special characters. 

|===